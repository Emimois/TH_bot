#!/usr/bin/env python
# coding: utf-8

# In[ ]:


from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
import os

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
NAME, PHONE, SERVICE, DESCRIPTION, PHOTO = range(5)

# –¢–æ–∫–µ–Ω –∏ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
TOKEN = '8183788727:AAFweQjQaLH7YoR1DNyijdwmumA5HZzepBQ'
MANAGER_CHAT_ID = 990020148  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# –°–ª–æ–≤–∞—Ä—å: user_id -> —Å—Ç–∞—Ç—É—Å
request_status = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Å–ª—É–≥–∞–º–∏
service_keyboard = ReplyKeyboardMarkup([
    ['üõ† –†–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á', 'üîá –®—É–º–æ–∏–∑–æ–ª—è—Ü–∏—è'],
    ['üöø –°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã', 'ü™µ –£–∫–ª–∞–¥–∫–∞ –ø–æ–ª–æ–≤'],
    ['üí° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞', '‚ùì –î—Ä—É–≥–æ–µ']
], one_time_keyboard=True, resize_keyboard=True)

def start(update: Update, context: CallbackContext) -> int:
    welcome = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã *¬´–¢–∏—Ö–∏–π –¥–æ–º¬ª* ‚Äî –ø–æ–º–æ–≥–∞–µ–º —Å —Ä–µ–º–æ–Ω—Ç–æ–º –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ú–æ—Å–∫–≤–µ –∏ –æ–±–ª–∞—Å—Ç–∏.\n\n"
        "üîß *–ù–∞—à–∏ —É—Å–ª—É–≥–∏:*\n"
        "‚Ä¢ üõ† –†–µ–º–æ–Ω—Ç –ø–æ–¥ –∫–ª—é—á\n"
        "‚Ä¢ üîá –®—É–º–æ–∏–∑–æ–ª—è—Ü–∏—è\n"
        "‚Ä¢ üí° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∏ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞\n"
        "‚Ä¢ ü™µ –£–∫–ª–∞–¥–∫–∞ –ø–æ–ª–æ–≤ –∏ –æ—Ç–¥–µ–ª–∫–∞\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    )
    update.message.reply_text(welcome, parse_mode='Markdown')
    return NAME

def get_name(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {context.user_data['name']}! üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    return PHONE

def get_phone(update: Update, context: CallbackContext) -> int:
    context.user_data['phone'] = update.message.text
    update.message.reply_text("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é:", reply_markup=service_keyboard)
    return SERVICE

def get_service(update: Update, context: CallbackContext) -> int:
    context.user_data['service'] = update.message.text
    update.message.reply_text(f"{context.user_data['name']}, ‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–¥–∞—á–µ.")
    return DESCRIPTION

def get_description(update: Update, context: CallbackContext) -> int:
    context.user_data['description'] = update.message.text
    update.message.reply_text(
        "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–º–µ—Ä—ã. –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ *–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å*", parse_mode='Markdown'
    )
    return PHOTO

def get_photo(update: Update, context: CallbackContext) -> int:
    photo = update.message.photo[-1].file_id if update.message.photo else None
    context.user_data['photo'] = photo
    user_id = update.message.from_user.id

    request_status[user_id] = "üïí –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"

    msg = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üÜî ID –∫–ª–∏–µ–Ω—Ç–∞: {user_id}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üß∞ –£—Å–ª—É–≥–∞: {context.user_data['service']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['description']}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {request_status[user_id]}"
    )
    context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=msg)
    if photo:
        context.bot.send_photo(chat_id=MANAGER_CHAT_ID, photo=photo)

    update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n\n"
        "üî• *–ê–∫—Ü–∏—è:* –∑–∞–º–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ + —Å–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ä–µ–º–æ–Ω—Ç–∞ –ø–æ–¥ –∫–ª—é—á!", parse_mode='Markdown'
    )
    return ConversationHandler.END

def skip_photo(update: Update, context: CallbackContext) -> int:
    return get_photo(update, context)

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def faq(update: Update, context: CallbackContext):
    update.message.reply_text(
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "‚Ä¢ ‚è≥ –°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è —Ä–µ–º–æ–Ω—Ç? ‚Äî –æ—Ç 7 –¥–æ 30 –¥–Ω–µ–π\n"
        "‚Ä¢ üìÑ –†–∞–±–æ—Ç–∞–µ–º –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É? ‚Äî –î–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ\n"
        "‚Ä¢ üõ† –ú–æ–∂–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ? ‚Äî –î–∞\n"
        "‚Ä¢ ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è? ‚Äî 6 –º–µ—Å—è—Ü–µ–≤", parse_mode='Markdown'
    )

def check_status(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    status = request_status.get(user_id, "üòî –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    update.message.reply_text(f"üìç –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:\n{status}")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(Filters.text & ~Filters.command, get_name)],
            PHONE: [MessageHandler(Filters.text & ~Filters.command, get_phone)],
            SERVICE: [MessageHandler(Filters.text & ~Filters.command, get_service)],
            DESCRIPTION: [MessageHandler(Filters.text & ~Filters.command, get_description)],
            PHOTO: [
                MessageHandler(Filters.photo, get_photo),
                MessageHandler(Filters.text & ~Filters.command, skip_photo)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler('faq', faq))
    dp.add_handler(CommandHandler('status', check_status))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()

